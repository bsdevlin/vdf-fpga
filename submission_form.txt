VDF FPGA Competition Submission Form

To submit your design:
- submit an official team entry form
- fill in the fields below
- create your final commit with git signoff:
    git commit -s -m "round 1 entry"
- email your final repo + commit to hello@vdfalliance.org

Team name: Benjamin Devlin
Expected result (avg ns/square): 47.6ns/sq (3 clocks @ 63MHz)

Design documentation (below):

- Implemented Montgomery multiplication algorithm (chose not to do Barret reduction algorithm as then we need to use subtraction and that makes redundant bit form a bit more complicated)
  - One modular multiplication in Montgomery space takes 3 clock cycles
    - No reason to pipeline as no resource sharing, saves on clock power
  - One squaring, one multiplication where we mask away the upper half, one multiplication with addition where we shift away the lower half
  - We do not require the final check to see if we are larger than the modulus due to increasing the number of words used by 1 in the multiplier
  - Final addition step is combined into the multiplier adder tree to save a clock cycle
  - Uses log3 adders rather than log2 for shorter critical path / less LUT usage
- Redundant binary representation of 17 bits for a 16 bit word
- Created a multi-mode multiplier that uses 2272 DSPs to fit on one SLR (2280)
  - Uses control to select what mode (square / lower half / upper half), all control signals are routed through BUFGs, control signals one-hot
  - Calculates 2 additional words past the shift/mask boundary so that we can detect and adjust overflow
- MMCM PLL to allow to adjust clock period after place and route to operate at max frequency
  - We over constrain and then adjust down in tcl script binary seach so timing passes.
- Clock crossing done in wrapper using per-word FIFOs
- Conversion in and out of Montgomery form is done in the SW wrapper
- Power ramp up not used
- Software model in Verilog is in the package file src/rtl/redun_mont_pkg.sv and Python version in scripts/mont.py

TODO:
- check BUFg on tmp_h signal
